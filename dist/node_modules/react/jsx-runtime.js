(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

  // 需要把ReactElement定义为独一无二的值，所以用symbol
  // 判断是否支持Symbol
  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xa001;

  // ReactElement构造函数
  const ReactElement = function (type, key, ref, props) {
      const element = {
          // 判断当前字段是一个ReactElement
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'garril'
      };
      return element;
  };
  // jsx方法
  /*
    import { jsx as _jsx } from "react/jsx-runtime";
    _jsx("div", {
      id: "test",
      children: "123"
    });
  */
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      const props = {};
      let ref = null;
      for (const prop in config) {
          const val = config[prop];
          // key 和 ref要先单独处理
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // props
          // 判断是自己的prop，而不是原型上的
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      // 处理maybeChildren
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          // 长度为一，帮他直接铺开
          if (maybeChildrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  // 生产环境（jsx） 和 开发环境（jsxDEV）是不同的实现
  // 开发多了很多额外的检查
  const jsxDEV = (type, config) => {
      let key = null;
      const props = {};
      let ref = null;
      for (const prop in config) {
          const val = config[prop];
          // key 和 ref要先单独处理
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // props
          // 判断是自己的prop，而不是原型上的
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
